#separator:tab
#html:true
#notetype column:1
#deck column:2
#tags column:5
Basique	OS	Qu’est-ce qu’un système d’exploitation ?	Logiciel qui offre une interface abstraite entre le matériel (CPU, RAM, disque, etc.) et les applications, permettant de gérer les ressources et d’assurer la sécurité.
Basique	OS	Quels sont les rôles principaux d’un OS ?	"<ol><li>Gestion des ressources (CPU, mémoire, E/S)</li><li>
Gestion des périphériques</li><li>Sécurité et isolation des processus</li></ol>"
Basique	OS	Quelle est la différence entre un noyau monolithique et un micro-noyau ?	"<ul><li><em>Monolithique</em> : tous les services (fichiers, réseau, planification) tournent en mode noyau → rapide mais moins sûr.</li><li><em>Micro-noyau</em> : seul un noyau minimal tourne en mode noyau, le reste en mode utilisateur → plus sûr et modulaire, mais plus lent.</li></ul>
"
Basique	OS	Qu’est-ce qu’un exokernel ?	Un noyau minimaliste qui n’abstrait pas le matériel ; il fournit uniquement la sécurité et laisse les applications gérer les ressources elles-mêmes.
Basique	OS	Que représentent les “rings” sur x86 ou “Exception Levels” sur ARM ?	"<ul><li>Ring 0 / EL1 : noyau</li><li>Ring 3 / EL0 : utilisateur</li></ul>→ Seul le noyau peut exécuter des instructions privilégiées.<br>
<br>"
Basique	OS	Qu’est-ce qu’un <em>system call</em> ?	Une requête faite par un programme utilisateur au noyau pour exécuter une opération privilégiée (ex. : lire un fichier, écrire sur l’écran, terminer un processus).
Basique	OS	Comment un appel système est-il réalisé ?	"<ol><li>L’application place les arguments dans les registres (x0-x2…).</li><li><div>Le numéro d’appel dans w8.</div>
</li><li>
<div>Elle exécute l’instruction <code>svc #0</code> (Supervisor Call).</div>
</li><li>Le noyau exécute la fonction correspondante.</li></ol>


"
Basique	OS	Donne un exemple d’appel système sous Linux pour écrire “Hello, World!”	"mov x0, #1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // stdout<br>ldr x1, =msg&nbsp;&nbsp;&nbsp; // adresse du texte<br>mov x2, #14&nbsp;&nbsp;&nbsp;&nbsp; // longueur<br>mov w8, #64&nbsp;&nbsp;&nbsp;&nbsp; // syscall write<br>svc #0"
Basique	OS	Quelle est la différence entre un <em>branch/call</em> et un <em>system call</em> ?	"<ul><li><em>call/branch</em> → transfert de contrôle dans le même programme (même niveau de privilège).</li><li><em>system call</em> → transfert vers le noyau (niveau de privilège supérieur).</li></ul>
<br>"
Basique	OS	Qu’est-ce qu’un signal ?	Une notification asynchrone envoyée à un processus pour indiquer un événement (ex. : <code>SIGINT</code> pour Ctrl+C, <code>SIGKILL</code> pour terminer).
Basique	OS	Qu’est-ce que <code>strace</code> ?	Un outil Linux qui intercepte et affiche les appels système d’un processus pour le déboguer.
Basique	OS	Quelles sont les deux grandes zones mémoire d’un processus ?	"<ul><li><div><em>Statique</em> : code, données initialisées, BSS.</div>
</li><li>
<div><em>Dynamique</em> : pile (stack) et tas (heap).</div></li></ul>
"
Basique	OS	Quelle est la différence entre pile et tas ?	"<ul><li><div><em>Pile</em> : gérée automatiquement (LIFO), utilisée pour variables locales, appels de fonctions.</div>
</li><li>
<div><em>Tas</em> : géré manuellement (malloc/new), pour objets dynamiques.</div></li></ul>
"
Basique	OS	Comment s’effectue l’allocation dynamique sous Linux ?	"<div>Par deux appels système :</div>
<ul>
<li>
<div><code>brk</code> : déplace la “program break” (limite du tas).</div>
</li>
<li>
<div><code>mmap</code> : mappe des fichiers ou alloue des zones virtuelles.</div></li></ul>"
Basique	OS	Quelle différence entre <code>brk</code> et <code>mmap</code> ?	"<ul><li><div><code>brk</code> : rapide mais sujet à fragmentation.</div>
</li><li>
<div><code>mmap</code> : plus flexible, utile pour grosses allocations ou fichiers mappés.</div></li></ul>
"
Basique	OS	Qu’est-ce que la fragmentation ?	"<ul><li><div><em>Interne</em> : espace inutilisé à l’intérieur d’une partition fixe.</div>
</li><li>
<div><em>Externe</em> : petits “trous” dispersés empêchant de nouvelles allocations.</div></li></ul>
"
Basique	OS	Que font les stratégies <em>First fit</em>, <em>Best fit</em>, <em>Worst fit</em>, <em>Next fit</em> ?	"<ul><li><em>First fit</em> : première case assez grande.</li><li>
<div><em>Best fit</em> : plus petite case suffisante.</div>
</li><li>
<div><em>Worst fit</em> : plus grande case disponible.</div>
</li><li><em>Next fit</em> : reprend la recherche après la dernière allocation.</li></ul>


"
Basique	OS	Qu’est-ce que la pagination ?	Technique où la mémoire est découpée en pages fixes mappées sur des cadres physiques (frames), supprimant la fragmentation externe.
Basique	OS	Que fait la segmentation ?	Divise la mémoire logique d’un processus en segments (code, données, pile), chacun ayant sa base et sa limite.
Basique	OS	Quel est le rôle de la MMU ?	Traduire les adresses virtuelles en adresses physiques et vérifier les droits d’accès.
Basique	OS	Quelle différence entre espace d’adressage virtuel et physique ?	"<ul><li><div><em>Virtuel</em> : utilisé par les programmes (indépendant du matériel).</div>
</li><li>
<div><em>Physique</em> : correspond à la mémoire réelle.</div></li></ul>
"
Basique	OS	Pourquoi a-t-on besoin d’un système d’exploitation ?	Pour permettre à plusieurs programmes d’utiliser les mêmes ressources matérielles de manière sûre, efficace et abstraite.
Basique	OS	Quelles sont les trois couches principales d’un système d’exploitation ?	"<ul><li><div><strong>Kernel (noyau)</strong> : contrôle total du matériel.</div>
</li><li>
<div><strong>System Call Interface (SCI)</strong> : interface pour les programmes utilisateurs.</div>
</li><li>
<div><strong>Architecture Interface</strong> : couche dépendante du matériel (CPU, mémoire, périphériques).</div></li></ul>

"
Basique	OS	Quelle est la différence entre un interpréteur comme la JVM et un OS ?	"<ul><li><div>La JVM s’exécute <em>au-dessus</em> de l’OS et fournit une abstraction pour un langage.</div>
</li><li>
<div>L’OS s’exécute <em>au-dessus du matériel</em> et fournit une abstraction pour toutes les applications.</div></li></ul>
"
Basique	OS	Qu’est-ce que le mode noyau et le mode utilisateur ?	"<ul><li><div><em>Mode noyau</em> : accès complet aux ressources matérielles.</div>
</li><li>
<div><em>Mode utilisateur</em> : accès restreint, passe par le SCI pour les opérations privilégiées.</div></li></ul>
"
Basique	OS	Pourquoi séparer le mode utilisateur du mode noyau ?	Pour éviter qu’un programme utilisateur puisse corrompre la mémoire ou le matériel du système.
Basique	OS	Quelle instruction ARM64 provoque un passage en mode noyau ?	"<code>svc #0</code> (Supervisor Call)."
Basique	OS	Qu’est-ce qu’un “exception handler” ?	Une fonction spéciale du noyau qui traite les exceptions (interruption, trap, syscall, etc.).
Basique	OS	Quelle est la différence entre une exception et une interruption ?	"<ul><li><div><em>Exception</em> : déclenchée par le programme (ex. division par zéro).</div>
</li><li>
<div><em>Interruption</em> : déclenchée par un événement externe (ex. signal matériel).</div></li></ul>
"
Basique	OS	Quelle est la différence entre le firmware et l’OS ?	"<ul><li><div><em>Firmware</em> : code bas-niveau installé sur le matériel, exécuté avant l’OS.</div>
</li><li>
<div><em>OS</em> : logiciel généraliste chargé ensuite pour gérer tout le système.</div></li></ul>
"
Basique	OS	Quel est l’objectif principal du <em>scheduler</em> ?	Décider quel processus doit utiliser le CPU à chaque instant pour maximiser l’efficacité et l’équité.
Basique	OS	À quoi sert l’interface d’appel système ?	C’est la passerelle entre les applications utilisateur et les services du noyau (lecture, écriture, création de processus, etc.).
Basique	OS	Que fait le registre w8 avant un <code>svc</code> ?	Il contient le numéro de l’appel système à exécuter.
Basique	OS	Quels registres sont utilisés pour passer les arguments d’un appel système ?	x0, x1, x2, x3, x4, x5 (selon le nombre d’arguments).
Basique	OS	Qu’est-ce qu’une “wrapper library” ?	Une bibliothèque (comme <code>libc</code>) qui fournit des fonctions C simplifiant l’usage des appels système (ex. <code>printf()</code> → <code>write()</code>).
Basique	OS	Comment Python appelle-t-il un appel système Linux ?	Par <code>libc.syscall(...)</code> via le module <code>ctypes</code>, qui invoque directement la fonction C.
Basique	OS	À quoi sert <code>strace</code> ?	À afficher et suivre les appels système effectués par un programme (utile pour comprendre son fonctionnement).
Basique	OS	Quelle différence entre <code>SIGKILL</code> et <code>SIGINT</code> ?	"<ul><li><code>SIGKILL</code> tue immédiatement le processus (non interceptable).</li><li><code>SIGINT</code> peut être intercepté (ex. Ctrl+C dans un terminal).</li></ul>
<br>"
Basique	OS	Qu’est-ce que <code>getpid()</code> ?	Un appel système qui retourne l’ID du processus courant.
Basique	OS	Comment un programme peut-il gérer un signal ?	En enregistrant un <em>handler</em> avec <code>signal.signal(SIGINT, ma_fonction)</code> (en Python ou C).
Basique	OS	Que fait un “system call wrapper” comme <code>write()</code> ?	Il prépare les registres, appelle <code>svc</code>, et traduit les codes d’erreurs du noyau en exceptions ou valeurs de retour.
Basique	OS	Qu’est-ce que la mémoire virtuelle ?	Un espace d’adressage abstrait fourni par le noyau à chaque processus, traduisant les adresses virtuelles en adresses physiques via la MMU.
Basique	OS	Pourquoi utiliser la mémoire virtuelle ?	"<ul><li>solation des processus.</li><li>
<div>Simplification de la gestion mémoire.</div>
</li><li>Protection et sécurité.</li></ul>

"
Basique	OS	Qu’est-ce que la MMU (Memory Management Unit) ?	Un composant matériel qui traduit les adresses virtuelles en physiques et vérifie les permissions d’accès.
Basique	OS	Quelle différence entre segmentation et pagination ?	"<ul><li><div><em>Segmentation</em> : la mémoire est divisée en segments logiques de tailles variables.</div>
</li><li>
<div><em>Pagination</em> : la mémoire est découpée en pages de taille fixe.</div></li></ul>
"
Basique	OS	Pourquoi la pagination élimine-t-elle la fragmentation externe ?	Parce que toutes les pages ont la même taille, donc tout espace libre peut accueillir une page.
Basique	OS	Qu’est-ce que le <em>page sharing</em> ?	Plusieurs processus partagent les mêmes pages physiques (utile pour les bibliothèques communes).
Basique	OS	Quelle est la cause de la <em>segmentation fault</em> ?	Une tentative d’accès à une adresse mémoire non autorisée (protection de page).
Basique	OS	Quelle différence entre la pile et le tas ?	"<ul><li><div><em>Pile (stack)</em> : allocation automatique pour fonctions locales (croît vers le bas).</div>
</li><li>
<div><em>Tas (heap)</em> : allocation manuelle, croît vers le haut via <code>malloc</code>/<code>brk</code>.</div></li></ul>
"
Basique	OS	Que signifie “program break” ?	Limite supérieure du tas — l’adresse jusqu’où le programme a demandé de la mémoire via <code>brk</code>.
Basique	OS	Quels sont les deux appels système de gestion dynamique de mémoire ?	<code>brk</code> et <code>mmap</code>.
Basique	OS	Quelle est la principale faiblesse de <code>brk</code> ?	Elle entraîne facilement de la fragmentation et n’est pas thread-safe.
Basique	OS	Pourquoi <code>mmap</code> est-il préféré pour les grandes allocations ?	Car il permet d’allouer des zones indépendantes et de mapper directement des fichiers.
Basique	OS	Qu’est-ce que la fragmentation interne ?	Mémoire inutilisée <em>à l’intérieur</em> d’un bloc alloué.
Basique	OS	Qu’est-ce que la fragmentation externe ?	Espaces libres dispersés empêchant de nouvelles allocations.
Basique	OS	Qu’est-ce que le “First Fit” ?	Stratégie d’allocation qui choisit le premier espace libre assez grand.
Basique	OS	Que fait la stratégie “Best Fit” ?	Choisit le plus petit bloc possible pour minimiser le gaspillage, mais plus lente.
Basique	OS	Que fait “Next Fit” ?	Reprend la recherche à partir de la dernière position utilisée (utile quand il y a beaucoup d’allocations).
Basique	OS	Quelle est la structure de données utilisée par <code>malloc</code> ?	Des listes chaînées de blocs libres et occupés (free list / busy list).
Basique	OS	Que fait <code>free()</code> ?	Libère un bloc du tas et l’ajoute à la liste des blocs libres.
Basique	OS	Que contient la pile (stack) ?	Variables locales, adresses de retour, pointeurs de cadre (<code>x29</code>), registre de lien (<code>x30</code>).
Basique	OS	Quelle est la convention pour l’appel de fonction en ARM64 ?	"<ul><li><div>Sauvegarder <code>x29</code> et <code>x30</code> sur la pile.</div>
</li><li>
<div>Créer un nouveau <em>stack frame</em>.</div>
</li><li>
<div>Restaurer avant <code>ret</code>.</div></li></ul>

"
Basique	OS	Que sont les registres <em>callee-saved</em> ?	Registres dont la valeur doit être restaurée par la fonction appelée (<code>x19–x28</code>).
Basique	OS	Quelle est la taille d’alignement requise pour <code>sp</code> ?	16 octets.
Basique	OS	Que se passe-t-il si on oublie de restaurer le registre <code>x30</code> ?	Le retour de fonction (<code>ret</code>) échoue — le programme plante.
